<templateSet group="Vue">
  <template name="vstore-import" value="import { store } from './store/store';&#10;" description="Import Vuex store into main.js" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="vaction" value="actions: {&#10; $updateValue$({commit}, $payload$) {&#10;  commit($updateValue$, $payload$);&#10; }&#10;}" description="Vuex action" toReformat="true" toShortenFQNames="true">
    <variable name="updateValue" expression="" defaultValue="&quot;updateValue&quot;" alwaysStopAt="true" />
    <variable name="payload" expression="" defaultValue="&quot;payload&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vgetter" value="getters: {&#10; value: $value$ =&gt; {&#10;  return state.$value$;&#10; }&#10;}" description="Vuex getter" toReformat="true" toShortenFQNames="true">
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vstore" value="import Vue from 'vue';&#10;import Vuex from 'vuex';&#10;&#10;Vue.use(Vuex);&#10;&#10;export const store = new Vuex.Store({&#10; state: {&#10;  $key$: $value$&#10; }&#10;});" description="Vuex store" toReformat="true" toShortenFQNames="true">
    <variable name="key" expression="" defaultValue="&quot;key&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vdec" value="return this.$variable$ -= 1;" description="Decrement value" toReformat="true" toShortenFQNames="true">
    <variable name="variable" expression="" defaultValue="&quot;num&quot;" alwaysStopAt="true" />
  </template>
  <template name="vinc" value="return this.$variable$ += 1;" description="Increment value" toReformat="true" toShortenFQNames="true">
    <variable name="variable" expression="" defaultValue="&quot;num&quot;" alwaysStopAt="true" />
  </template>
  <template name="vcomputed" value="computed: {&#10; $name$() {&#10;  return this.$data$ $END$;&#10; }&#10;}," description="Computed value" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="data" expression="" defaultValue="&quot;data&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vdata" value="data() {&#10; return {&#10;  $key$: $value$&#10; }&#10;}," description="Vue component data" toReformat="true" toShortenFQNames="true">
    <variable name="key" expression="" defaultValue="&quot;key&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vimport-export" value="import $Name$ from '~components/$Name$.vue';&#10;&#10;export default {&#10; components: {&#10;  $Name$&#10; },&#10;}" description="Import Vue component and include it in export default" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vimport" value="import $New$ from './components/$New$.vue';" description="Import Vue component" toReformat="true" toShortenFQNames="true">
    <variable name="New" expression="" defaultValue="&quot;New&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vimport-gsap" value="import { TimelineMax, $Ease$ } from 'gsap';" description="Import methods from GSAP" toReformat="true" toShortenFQNames="true">
    <variable name="Ease" expression="" defaultValue="&quot;Ease&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vimport-lib" value="import { $libName$ } from '$libName$';" description="Import library" toReformat="true" toShortenFQNames="true">
    <variable name="libName" expression="" defaultValue="&quot;libName&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vimport-c" value="components: {&#10; $New$,&#10;}" description="Import Vue component into another, within export statement" toReformat="true" toShortenFQNames="true">
    <variable name="New" expression="" defaultValue="&quot;New&quot;" alwaysStopAt="true" />
  </template>
  <template name="vmixin" value="const $mixinName$ = {&#10; mounted() {&#10;  console.log('hello from mixin!');&#10; },&#10;}" description="Vue mixin" toReformat="true" toShortenFQNames="true">
    <variable name="mixinName" expression="" defaultValue="&quot;mixinName&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vprops" value="props: {&#10; $propName$: {&#10;  type: $type$,&#10;  default: $default$$END$&#10; },&#10;}," description="Vue props with default" toReformat="true" toShortenFQNames="true">
    <variable name="propName" expression="" defaultValue="&quot;propName&quot;" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="&quot;Number&quot;" alwaysStopAt="true" />
    <variable name="default" expression="" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vanimhook-js" value="methods: {&#10; beforeEnter(el) {&#10;  console.log('beforeEnter');&#10; },&#10; enter(el, done) {&#10;  console.log('enter');&#10;  done();&#10; },&#10; beforeLeave(el) {&#10;  console.log('beforeLeave');&#10; },&#10; leave(el, done) {&#10;  console.log('leave');&#10;  done();&#10; },&#10;}," description="Vue transition methods with JavaScript hooks" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="vmixin-use" value="mixins: [$mixinName$]" description="Vue use mixin" toReformat="true" toShortenFQNames="true">
    <variable name="mixinName" expression="" defaultValue="&quot;mixinName&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vclass-obj" value="&lt;$div$ :class=&quot;[$classNameA$, $classNameB$]&quot;&gt;&lt;/$div$&gt;" description="Vue class binding object" toReformat="true" toShortenFQNames="true">
    <variable name="div" expression="" defaultValue="&quot;div&quot;" alwaysStopAt="true" />
    <variable name="classNameA" expression="" defaultValue="&quot;classNameA&quot;" alwaysStopAt="true" />
    <variable name="classNameB" expression="" defaultValue="&quot;classNameB&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vel-props" value="&lt;$component$ :$propName$=&quot;$END$&quot;&gt;&lt;/$component$&gt;" description="Vue component with props binding" toReformat="true" toShortenFQNames="true">
    <variable name="component" expression="" defaultValue="&quot;component&quot;" alwaysStopAt="true" />
    <variable name="propName" expression="" defaultValue="&quot;propName&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vstyle-obj" value="&lt;$div$ :style=&quot;[$styleObjectA$, $styleObjectB$]&quot;&gt;&lt;/$div$&gt;" description="Vue style binding object" toReformat="true" toShortenFQNames="true">
    <variable name="div" expression="" defaultValue="&quot;div&quot;" alwaysStopAt="true" />
    <variable name="styleObjectA" expression="" defaultValue="&quot;styleObjectA&quot;" alwaysStopAt="true" />
    <variable name="styleObjectB" expression="" defaultValue="&quot;styleObjectB&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vmodel-num" value="&lt;input v-model.number=&quot;$numData$&quot; type=&quot;number&quot; step=&quot;1&quot; /&gt;" description="Vue v-model number directive" toReformat="true" toShortenFQNames="true">
    <variable name="numData" expression="" defaultValue="&quot;numData&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="vbase" value="&lt;template&gt;&#10; &lt;div&gt;&#10;&#10; &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10; export default {&#10;  $END$&#10; }&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;&#10;&lt;/style&gt;" description="Vue single file component" toReformat="true" toShortenFQNames="true" />
</templateSet>